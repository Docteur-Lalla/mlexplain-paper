Review #4A
===========================================================================

Overall merit
-------------
3. Weak accept

Reviewer expertise
------------------
3. Knowledgeable

Paper summary
-------------
The authors extend the JSExplain system (which is a step-by-step visualizing interpreter for JavaScript) to deal with a subset of the OCaml language to make MLExplain. JSExplain is written in OCaml, as is MLExplain -- they are then compiled to JavaScript with js_of_ocaml.

In MLExplain, The OCaml typed abstract syntax tree for a program is serialized into a javascript representation, which is then interpreted. A web interface shows the program's execution.

Comments for author
-------------------
Screenshots of the web interface for MLExplain on example programs would have been helpful in this proposal, or in general, examples of any kind!

Alan: Done

A poster was given at last year's workshop on the topic of interpreting OCaml for debugging. What are the differences here? What are the similarities?

Alan: I know what they are talking of, but I don't have a reference for it

This work is ingenious and should provide an interesting presentation, and so I recommend it for inclusion, but I hope the presentation captures the visualization elements more that the proposal does.


* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *


Review #4B
===========================================================================

Overall merit
-------------
4. Accept

Reviewer expertise
------------------
3. Knowledgeable

Paper summary
-------------
The authors describe a "double debugger" for OCaml: that is, a way of running step by step an interpreter for OCaml whilst simultaneously viewing the location and state of the source program being interpreted.

Comments for author
-------------------
I really like this idea and believe it would make a great presentation at the OCaml workshop. Obviously it very much suits live demonstration! 

It's a shame that there aren't any screenshots in the submitted abstract, but I did try out the system using the link in footnote 2. Just a few comments

Alan: Done

- The abstract talks about running the instrumented interpreter to generate a trace. Does this mean that the program has to run to completion before its execution can be probed? Or is the (Javascript) output of the compiled interpreter run in a debugger? This wasn't clear to me. If the former, would it in future be possible to do "live" debugging.

Alan: Clarified

- I wonder if the authors could comment on alternative approaches e.g. just using a conventional debugger on the interpreter but with good *visualizers* for the program state that include the highlighted source. Wouldn't this achieve the same effect?

Alan: Done

- The identification of the state of the interpreter seems a bit fragile e.g. looking for parameters with particular names (_term_). Is this the case? Do things break easily if the interpreter is changed, especially if it is refactored in non-trivial way?

Alan: TODO

- Was there a fundamental reason to omit support for objects and record patterns?

Alan: TODO

* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *


Review #4C
===========================================================================

Overall merit
-------------
3. Weak accept

Reviewer expertise
------------------
3. Knowledgeable

Paper summary
-------------
For programmers, it is sometimes difficult to understand
how their programs are evaluated. Authors present a tool
MLExplain, a step-by-step interpreter.
Using the tool, programmers can see how their programs are evaluated
and (if there are errors in the program) find the error sources.

Comments for author
-------------------
These systems are needed especially for novices.
It's very helpful that authors implemented the system for online use.
There are some questions:

- Why is JavaScript needed?
It will be possible to implement a double debugger using only OCaml.
The reason for the necessity of JavaScript cannot be found in this paper.

Alan: Done

- What is the difference between steppers and step-by-step interpreters?
Let us consider the following small program :
let a = 2 + 3 in let b = 4 + 3 in a + b
Using online implementation I can see
the environment for a + b correctly, {a = 5; b = 7}.
However, I can not find the step-by-step result of a + b.
(The highlighted parts are moved, so internally it might be evaluated.
 steppers will show these evaluations.)
 
Alan: This will need to be shown in the demo

- Is it possible to prove that your implementation uses the same evaluation order with OCaml?
Although OCaml does not have the official specification, the order of evaluation should be the same with OCaml.

Alan: TODO
